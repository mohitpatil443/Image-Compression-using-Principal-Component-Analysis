# -*- coding: utf-8 -*-
"""Image Compression using PCA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xp4yGRG6zCTvDWdvJtGq-UlJLtmH2vHw
"""

from scipy.linalg import eigh
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np

sample_img=Image.open("bird.jpg")
print(sample_img.size)

# Plotting the sample image and grayscaled image side by side
fig,[img1,img2] = plt.subplots(1,2,figsize=(12,10))

img1.imshow(sample_img)
img1.axis('off')
img1.set_title("Sample Image")

grayscale_img=sample_img.convert('LA')
img2.imshow(grayscale_img)
img2.axis('off')
img2.set_title("Grayscaled Image ")
plt.savefig("sample image.png")

#converting the grayscale image to numpy matrix
grayscale_matrix=np.array(list(grayscale_img.getdata(band=0)),float)

grayscale_matrix.shape=(grayscale_img.size[1],grayscale_img.size[0])

# Display image 
plt.figure(figsize=(8,6))
print('Matrix Shape : ',grayscale_matrix.shape)
plt.imshow(grayscale_matrix,cmap='gray')
plt.axis('off')
plt.title("Grayscaled Image Matrix Representation")
plt.show()

def pca(image_matrix):

  # Calculating the center matrix 
  centered_matrix = image_matrix - np.mean(image_matrix,axis=0)

  # Calculating the covariance matrix
  covariance_matrix=np.cov(centered_matrix,rowvar = False)

  print("Covariance matrix shape :  ",covariance_matrix.shape)
  print("np.mean shape :", np.mean(image_matrix,axis=0).shape)

  # Computing the eigen values and eigen vectors for the sample
  eigen_values,eigen_vectors=np.linalg.eigh(covariance_matrix) 

  # Size of eigen vector
  eigen_vectors_dimensions=np.size(eigen_vectors,axis=0)

  # Sorting eigen values
  sorted_indices=np.argsort(eigen_values)
  sorted_indices=sorted_indices[::-1]
 
  # Choosing eigen vector coresponding to order of eigen value
  eigen_vectors=eigen_vectors[:,sorted_indices]
  eigen_values=eigen_values[sorted_indices]

  return eigen_values,eigen_vectors,covariance_matrix,centered_matrix

eigen_values,eigen_vectors,covariance_matrix,centered_matrix=pca(grayscale_matrix)

variance_ratio = eigen_values/np.sum(eigen_values)
print(variance_ratio.round(3)[:50] * 100)
plt.plot(variance_ratio.round(3)[:50] * 100)
plt.ylabel('Variance explained(%)')
plt.xlabel('Principal components')
plt.show()

cumulative_variance_ratio=np.cumsum(eigen_values)/np.sum(eigen_values)
print(cumulative_variance_ratio.round(3)[:50]*100)
plt.plot(cumulative_variance_ratio.round(3)[:50]*100)
plt.ylabel('Cumulative variance explained(%)')
plt.xlabel('Number of principal components ')
plt.savefig("Cummulative variance explained by number of components.png")
plt.show()

def compress_img(image_matrix,value,eigen_values,eigen_vectors,centered_matrix):
  total_dimensions = image_matrix.shape[1];
  required_dimensions = int(value / 100 * total_dimensions)
  
  if required_dimensions < total_dimensions or required_dimensions > 0 :
    eigen_vectors=eigen_vectors[:,range(required_dimensions)]
  

  # Reconstruct the image using dot product of eigen vector and covariance matrix
  score=np.dot(centered_matrix,eigen_vectors)
  compressed_image=np.dot(score,eigen_vectors.T) + np.mean(image_matrix,axis=0)
  
  return compressed_image

img1=compress_img(grayscale_matrix,1,eigen_values,eigen_vectors,centered_matrix)

img2=compress_img(grayscale_matrix,3,eigen_values,eigen_vectors,centered_matrix)

img3=compress_img(grayscale_matrix,5,eigen_values,eigen_vectors,centered_matrix)

img4=compress_img(grayscale_matrix,10,eigen_values,eigen_vectors,centered_matrix)

img5=compress_img(grayscale_matrix,20,eigen_values,eigen_vectors,centered_matrix)

img6=compress_img(grayscale_matrix,30,eigen_values,eigen_vectors,centered_matrix)

img7=compress_img(grayscale_matrix,40,eigen_values,eigen_vectors,centered_matrix)

fig, [ax0,ax1] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(grayscale_matrix,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

#ax0.text(0,0,"Image size : "+str(img_mat.shape),size='xx-large',va='bottom')
ax1.axis('off')
ax1.imshow(img1,cmap=plt.get_cmap('gray'))
ax1.set_title('1% components')
plt.savefig("1% components.png")
plt.show()

fig, [ax0,ax2] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(grayscale_matrix,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax2.axis('off')
ax2.imshow(img2,cmap=plt.get_cmap('gray'))
ax2.set_title(' 3% components')

plt.savefig("3% components.png")
plt.show()

fig, [ax0,ax3] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(grayscale_matrix,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax3.axis('off')
ax3.imshow(img3,cmap=plt.get_cmap('gray'))
ax3.set_title(' 5% components')

plt.savefig("5% components.png")
plt.show()

fig, [ax0,ax4] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(grayscale_matrix,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax4.axis('off')
ax4.imshow(img4,cmap=plt.get_cmap('gray'))
ax4.set_title(' 10% components')

plt.savefig("10% components.png")
plt.show()

fig, [ax0,ax5] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(grayscale_matrix,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax5.axis('off')
ax5.imshow(img5,cmap=plt.get_cmap('gray'))
ax5.set_title(' 20% components')

plt.savefig("20% components")
plt.show()

fig, [ax0,ax6] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(grayscale_matrix,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax6.axis('off')
ax6.imshow(img6,cmap=plt.get_cmap('gray'))
ax6.set_title(' 30% components')

plt.savefig("30% components")
plt.show()

fig, [ax0,ax7] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(grayscale_matrix,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax7.axis('off')
ax7.imshow(img7,cmap=plt.get_cmap('gray'))
ax7.set_title(' 40% components')

plt.savefig("40% components")
plt.show()

